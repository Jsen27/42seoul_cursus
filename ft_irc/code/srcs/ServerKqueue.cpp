/* This code job in BSD System */

#ifdef __APPLE__
	
	#include "ServerKqueue.hpp"

	/* Constructors */
	ServerKqueue::ServerKqueue(int port)
	{
		std::string tmp = "127.0.0.1";
		AbstractServerApi::Init(tmp, port);
		Init_Serv();
	}

	ServerKqueue::ServerKqueue(const char *ipaddr, int port)
	{
		std::string tmp = std::string(ipaddr);;
		AbstractServerApi::Init(tmp, port);
		Init_Serv();
	}

	ServerKqueue::ServerKqueue(std::string ipaddr, int port)
	{
		AbstractServerApi::Init(ipaddr, port);
		Init_Serv();
	}

	void 	ServerKqueue::Init_Serv()
	{
		_logs << "ServerType: Kqueue üåê " << std::endl;

		int res_kevent;

		/* 
		** –°–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤ kqueue () —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å —Å–æ–±—ã—Ç–∏–π —è–¥—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 
     	** –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä 
		*/

		_kq_fd = kqueue();
		if (_kq_fd == -1)
			ServerError("Kqueue");

		/* –î–æ–±–∞–≤–ª—è—é —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ—Å–ª—É—à–∫–∏ fd —Å–µ—Ä–≤–µ—Ä–∞ */
		/* –ó–∞–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è */
		/* EV_SET() ‚Äî —ç—Ç–æ –º–∞–∫—Ä–æ—Å, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã kevent . */
		/* EVFILT_READ - c–æ–±—ã—Ç–∏—è , EV_ADD | EV_ENABLE - —Ñ–∏–ª—å—Ç—Ä—ã –µ–≥–æ */
		/* –ì—Ä—É–±–æ –≥–æ–≤–æ—Ä—è –Ω–∞—Å—Ç—Ä–∏–≤–∞—é —Å–æ–∫–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ */
		EV_SET(&_evSet, _server_fd, EVFILT_READ, EV_ADD | EV_ENABLE , 0, 0, NULL);


		/* 
		**  –°–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤ kevent () –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ 
		** –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª—é–±—ã—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π. –ê—Ä–≥—É–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî —ç—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å 
		** –Ω–∞ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä kevent
		*/
		
		res_kevent = kevent(_kq_fd, &_evSet, 1, NULL, 0, NULL);
		if (res_kevent == -1)
			ServerError("Kevent");

		bzero(&_evSet, sizeof(_evSet));
	}



	/*
	**	Simple Use
	*/


	void 	ServerKqueue::kqueue_add(int fd)
	{
		struct kevent kv;
		
		/* EV_ADD -> –¥–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ */
		EV_SET(&kv, fd, EVFILT_READ, EV_ADD, 0 , 0, NULL);
		if (kevent(_kq_fd, &kv, 1, NULL, 0, NULL) == -1)
			ServerError("kevent add");

	}

	void 	ServerKqueue::kqueue_remove(int fd)
	{
		struct kevent kv;
		
		/* EV_DISABLE -> —É–¥–∞–ª—è—é –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è */
		EV_SET(&kv, fd, EVFILT_READ, EV_DISABLE, 0 , 0, NULL);
		if (kevent(_kq_fd, &kv, 1, NULL, 0, NULL) == -1)
			ServerError("kevent remove");
		
	}


	void 	ServerKqueue::Start()
	{
		Logger(BLUE, "Wait kevent...");
		bzero(_evList, sizeof(_evList));
		
		struct timespec ts;
		ts.tv_sec = 0;
		ts.tv_nsec = 0;

		_new_events = kevent(_kq_fd, NULL, 0, _evList, KQUEUE_SIZE, NULL);
		if (_new_events == -1)
			ServerError("kevent");


		for (int i = 0; i < _new_events; i++)
		{
			client_fd = _evList[i].ident;

			// When the client disconnects an EOF is sent. By closing the file
			// descriptor the event is automatically removed from the kqueue.
			if (_evList[i].flags & EV_EOF)
			{
				Logger(RED, "Disconnect fd(" + std::to_string(client_fd) + ") ‚ùå ");				
				kqueue_remove(client_fd);
				RemoveClient(client_fd);
			}
			else if (client_fd == _server_fd)
			{
				printf("i:%d\n", i);
				int new_client_fd;

				new_client_fd = Accept();
				Logger(GREEN, "Connect fd(" + std::to_string(new_client_fd) + ") ‚úÖ ");
				kqueue_add(new_client_fd);
			}
			else if (_evList[i].filter == EVFILT_READ)
			{
				AbstractServerApi::ReadInFd(client_fd);
				//event_flag = EVFILT_READ;
			}
			else if (_evList[i].filter == EVFILT_WRITE)
			{
				//event_flag = EVFILT_WRITE;
			}
		}

	}

	/* Main Functional */
	int		ServerKqueue::WaitEvent()
	{
		Logger(BLUE, "Wait kevent...");
		bzero(_evList, sizeof(_evList));
		
		struct timespec ts;
		ts.tv_sec = 0;
		ts.tv_nsec = 0;

		_new_events = kevent(_kq_fd, NULL, 0, _evList, KQUEUE_SIZE, NULL);
		_last_iter_connect = 0;
		_last_iter_read = 0;
		_last_iter_disconnect = 0;

		if (_new_events == -1)
		{
			ServerError("kevent");
			return (-1);
		}
		return (_new_events);
	}

	int		ServerKqueue::CheckConnect()
	{
		Logger(BLUE, "Check connect...");
		int client_fd;
		int new_client_fd;

		for (int i = _last_iter_connect; i < _new_events; i++)
		{
			client_fd = _evList[i].ident;

			if (client_fd == _server_fd)
			{
				new_client_fd = Accept();
				Logger(GREEN, "Connect fd(" + std::to_string(new_client_fd) + ") ‚úÖ ");
				kqueue_add(new_client_fd);
				
				_last_iter_connect = i;
				return (new_client_fd);
			}
		}
		return (0);
	}

	int		ServerKqueue::CheckDisconnect()
	{
		Logger(BLUE, "Check Disconnect...");
		int client_fd;

		for (int i = _last_iter_disconnect; i < _new_events; i++)
		{
			client_fd = _evList[i].ident;


			if (_evList[i].flags & EV_EOF)
			{
				Logger(RED, "Disconnect fd(" + std::to_string(client_fd) + ") ‚ùå ");				
				kqueue_remove(client_fd);
				RemoveClient(client_fd);

				_last_iter_disconnect = i;
				return (client_fd);
			}
			
		}
		return (0);
	}
	
	int		ServerKqueue::CheckAndRead()
	{
		Logger(BLUE, "CheckAndRead...");
		int client_fd;
		int res;

		for (int i = _last_iter_read; i < _new_events; i++)
		{
			client_fd = _evList[i].ident;

			if (_evList[i].filter == EVFILT_READ)
			{
				res = AbstractServerApi::ReadInFd(client_fd);
				//AbstractServerApi::SendInFd(client_fd, std::string("Sucsess in read\n"));
				//event_flag = EVFILT_READ;

				return(client_fd);
				//return (res);
			}
			
		}
		return (0);
	}

	ServerKqueue::~ServerKqueue()
	{
		close(_kq_fd);
		Logger(RED, "Call ServerKqueue Destructor ‚ùå ");
	}

#endif
